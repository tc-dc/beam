/* * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: org.apache.beam.gradle.BeamModulePlugin
applyJavaNature()

description = "Apache Beam :: Runners :: Java Fn Execution"

dependencies {
  compile library.java.guava
  compile project(path: ":beam-runners-core-construction-java", configuration: "shadow")
  provided project(path: ":beam-sdks-java-harness")
  shadow project(path: ":beam-model-pipeline", configuration: "shadow")
  shadow project(path: ":beam-model-fn-execution", configuration: "shadow")
  shadow project(path: ":beam-sdks-java-core", configuration: "shadow")
  shadow project(path: ":beam-sdks-java-fn-execution", configuration: "shadow")
  shadow project(path: ":beam-runners-core-construction-java", configuration: "shadow")
  shadow project(path: ":beam-vendor-sdks-java-extensions-protobuf", configuration: "shadow")
  shadow library.java.slf4j_api
  testCompile project(":beam-sdks-java-harness")
  testCompile project(path: ":beam-runners-core-construction-java", configuration: "shadow")
  testCompile project(path: ":beam-sdks-java-core", configuration: "shadowTest")
  testCompile library.java.junit
  testCompile library.java.hamcrest_core
  testCompile library.java.hamcrest_library
  testCompile library.java.mockito_core
  testCompile library.java.slf4j_simple
}

test {
  useJUnit {
    // Exclude tests that need Docker.
    excludeCategories "org.apache.beam.runners.fnexecution.environment.testing.NeedsDocker"
  }
}

task testDocker(type: Test) {
  group = "Verification"
  description = "Runs Docker tests"
  useJUnit {
    includeCategories "org.apache.beam.runners.fnexecution.environment.testing.NeedsDocker"
  }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

publishing {
    publications {
        shadow(MavenPublication) { publication ->
          groupId = "${projectGroupName}"
          artifactId = "${project.name}"
          version = "${projectVersionName}"
          
          project.shadow.component(publication)
          pom.withXml {                        
            def dependency = asNode().dependencies[0].appendNode('dependency')
            dependency.appendNode('groupId', group)
            dependency.appendNode('artifactId', 'beam-runners-core-construction-java')
            dependency.appendNode('version', version)            
          }
          pom.withXml {
            def dependency = asNode().dependencies[0].appendNode('dependency')
            dependency.appendNode('groupId', group)
            dependency.appendNode('artifactId', 'beam-sdks-java-harness')
            dependency.appendNode('version', version)            
          }
          pom.withXml {
            def dependency = asNode().dependencies[0].appendNode('dependency')
            dependency.appendNode('groupId', group)
            dependency.appendNode('artifactId', 'beam-model-pipeline')
            dependency.appendNode('version', version)            
          }
          pom.withXml {
            def dependency = asNode().dependencies[0].appendNode('dependency')
            dependency.appendNode('groupId', group)
            dependency.appendNode('artifactId', 'beam-model-fn-execution')
            dependency.appendNode('version', version)            
          }  
          pom.withXml {
            def dependency = asNode().dependencies[0].appendNode('dependency')
            dependency.appendNode('groupId', group)
            dependency.appendNode('artifactId', 'beam-sdks-java-core')
            dependency.appendNode('version', version)            
          }
          pom.withXml {
            def dependency = asNode().dependencies[0].appendNode('dependency')
            dependency.appendNode('groupId', group)
            dependency.appendNode('artifactId', 'beam-sdks-java-fn-execution')
            dependency.appendNode('version', version)            
          }
          pom.withXml {
            def dependency = asNode().dependencies[0].appendNode('dependency')
            dependency.appendNode('groupId', group)
            dependency.appendNode('artifactId', 'beam-runners-core-construction-java')
            dependency.appendNode('version', version)            
          }
          pom.withXml {
            def dependency = asNode().dependencies[0].appendNode('dependency')
            dependency.appendNode('groupId', group)
            dependency.appendNode('artifactId', 'beam-vendor-sdks-java-extensions-protobuf')
            dependency.appendNode('version', version)            
          }
        }        
    }
    repositories {
        maven {           
            url  "${artifactory_url}"
            credentials {
                username "${artifactory_username}"
                password "${artifactory_password}"
            }  
        }
    }
}

shadowJar {
    into("META-INF/maven/$project.group/$project.name") {        
        from { generatePomFileForShadowPublication }
        rename ".*", "pom.xml"
    }
    classifier = ''
    configurations = [project.configurations.compile]
}
